# determines if the dashboard is enabled
enable_dashboard: yes
# Which TCP port will the dashboard listen on
listen_port: 8888
# hide_log is useful if the dashboard will be published publicly. It disables the log channel,
# and hides most details associated with the node. Keep in mind that this is not fully tested to prevent
# information leaks about hostnames, etc.
hide_logs: no
# How long to wait before reporting that a node is down
node_down_alert_minutes: 3
# Should the prometheus exporter be included?
prometheus_enabled: yes
# What port should it listen on?
prometheus_listen_port: 28686
# Global setting
pagerduty:
# Should we use PD? Be aware that setting this option to no overrides individual chain alert settings.
enabled: no
# This is an API key, not an oauth token, see below for more details, but check out the v1.
api_key: aaaaaaaaaaabbbbbbbbbbbcccccccccccc
# Currently not in use, but will be in use soon. This allows you to set escalation priorities, etc.
default_severity: alert
# Discord settings
discord:
# Notifications in discord?
enabled: no
# The webhook is set up by right clicking on the channel, editing the settings and configuring the webhook in the integration section.
webhook: https://discord.com/api/webhooks/999999999999999999/zzzzzzzz

# Telegram settings
Telegram:
# Notification in Telegram? Note: also overrides network-specific settings
enabled: no
# API key... talk to @BotFather
api_key: '5555555555:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
# ID of the chat group to which messages will be sent
channel: "-666666666"
# Various chains to be monitored. Create a new entry for each network
chains:
# A user-friendly name to be used for labels. I strongly recommend enclosing in quotation marks
haqq:
# chain_id is checked for a match when connecting to an RPC endpoint, also used as a label in several places chain_id: haqq_54211–2
# Hooray, in v2 we're deriving valcons from abci requests so you don't have to jump through hoops to figure out how to convert ed25519 keys to the corresponding bech32 address
valoper_address: haqqvaloper1lmpvxm8lmrtwqwxdy43llhznwpcrk6y6jy9dl7
# Should monitoring return to ?????????????????????????? public API endpoints if all provisioned RCP nodes go down?
# This is not always reliable, not all public hosts have the correct websocket proxy setting.
public_fallback: yes
# Manages different alert settings for each network
alerts:
# If the network stops seeing new blocks, should a warning be sent?
stalled_enabled: yes
# How long it takes a stopped network in minutes to generate an alarm
stalled_minutes: 10
# Easiest alarm, you just missed x blocks…would you like to know?
consecutive_enabled: yes
# How many skipped blocks should trigger notification
consecutive_missed: 5
# NOT USED: future hint for pagerduty routing
consecutive_priority: critical
# For each network, there is a specific block window and the percentage of skipped blocks that will result in jail
# Should a warning be sent if a certain percentage of this window is exceeded?
percentage_enabled: no
# What percentage should trigger an alert
percentage_missed: 10
# Not used yet, pagerduty routing hint
percentage_priority: warning
# Whether a warning should be sent if the validator is not in the active set, i.e. imprisoned, tombstoned, unattached?
alert_if_inactive: yes
# Should a warning be sent if no RPC server is responding? (Please note that this alarm is given instantly without delay)
alert_if_no_servers: yes
# You can override alert settings for this *specific* network. If the api_key or webhook addresses are empty,
# then global settings will be used. Note that enabled must be set both globally and per chain
# Thread specific setting for pagerduty
pagerduty:
enabled: yes
api_key: "" # default if empty
# Discord settings
discord:
enabled: yes
webhook: “” # default if empty
# Telegram settings
Telegram:
enabled: yes
api_key: "" # default if empty
channel: “” # default if empty
# This section covers our RPC providers. LCD endpoints (aka REST) are not used, only RPC endpoints
# It is recommended to use multiple hosts and they will be tried sequentially until a working RPC is found
nodes:
# Endpoint URL. Must include protocol://hostname:port
— url: http://142.132.202.50:11601/
# Should we send a warning if this host is not responding?
alert_if_down: no
# repeated hosts for redundancy control
# - url:
# alert_if_down: no
# - url:
# alert_if_down: no
################################################### ################################
# Next, you can add a second and subsequent networks... Uncomment and change#
################################################### ################################
#chains:
# “L1”:
# chain_id: genesis_29–2
# valoper_address: genesisvaloper1…
# public_fallback: yes
# alerts:
# stalled_enabled: yes
# stalled_minutes: 10
# consecutive_enabled: yes
# consecutive_missed: 5
# consecutive_priority: critical
# percentage_enabled: no
# percentage_missed: 10
# percentage_priority: warning
# alert_if_inactive: yes
# alert_if_no_servers: yes
#pagerduty:
# enabled: yes
# api_key: “” # default if empty
#discord:
# enabled: yes
# webhook: “” # default if empty
#telegram:
# enabled: yes
# api_key: “” # default if empty
# channel: “” # default if empty
# nodes:
# - url:
# alert_if_down: yes
# - url:
# alert_if_down: no
# - url:
# alert_if_down: no
# - url:
# alert_if_down: no
